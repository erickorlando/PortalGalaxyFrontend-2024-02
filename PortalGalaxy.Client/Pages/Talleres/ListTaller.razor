@page "/taller/list"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@inject ITallerProxy Proxy
@inject IJsonProxy JsonProxy
@inject ICategoriaProxy CategoriaProxy
@inject NavigationManager Nav
@inject IToastService Toaster
@inject SweetAlertService Swal
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject IWebAssemblyHostEnvironment WebAssemblyHost

<ListaGenerica TItem="TallerDtoResponse" Lista="Talleres" Titulo="Lista de Talleres">
    <Filtros>
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText type="text" class="form-control" id="nombre" @bind-Value="BusquedaRequest.Nombre" />
                </div>
            </div>
            <div class="col-3">
                <label for="categoria" class="form-label">Categoría:</label>
                <InputSelect id="categoria" class="form-select" @bind-Value="BusquedaRequest.CategoriaId">
                    <option>Todos</option>
                    @foreach (var item in Categorias)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
            <div class="col-3">
                <label for="situacion" class="form-label">Situación:</label>
                <InputSelect id="situacion" class="form-select" @bind-Value="BusquedaRequest.Situacion">
                    <option>Todos</option>
                    @foreach (var item in Situaciones)
                    {
                        <option value="@item.Codigo">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row mt-3 justify-content-end">
            <div class="col-auto">
                <button class="btn btn-outline-primary" @onclick="OnSearch"><i
                        class="bi bi-search me-1"></i>Buscar</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-primary" @onclick="OnLimpiar"><i
                        class="bi bi-eraser-fill me-1"></i>Limpiar</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="OnNuevo"><i class="bi bi-plus-circle me-1"></i>Nuevo</button>
            </div>
        </div>
    </Filtros>
    <Cabeceras>
        <th>#</th>
        <th>Taller</th>
        <th>Categoria</th>
        <th>Instructor</th>
        <th>Fecha</th>
        <th>Situacion</th>
        @if (!ExportarPdf)
        {
            <th>Acción</th>
        }

    </Cabeceras>
    <Detalles>
        <td>@context.Id</td>
        <td>@context.Nombre</td>
        <td>@context.Categoria</td>
        <td>@context.Instructor</td>
        <td>@context.Fecha</td>
        <td>@context.Situacion</td>
        @if (!ExportarPdf)
        {
            <td>
                @switch (@context.Situacion)
                {
                    case "Por Aperturar":
                    case "Aperturada":
                        <i class="bi bi-check-circle-fill" style="color: green;"></i>
                        break;
                    case "Cancelada":
                        <i class="bi bi-dash-circle-fill" style="color: red;"></i>
                        break;
                    default:
                        <i class="bi bi-check2-circle"></i>
                        break;
                }
                <button type="button" class="btn" @onclick="() => OnEditar(context.Id)">
                    <i class="bi bi-pencil-fill"></i>
                </button>
                <button type="button" class="btn" @onclick="() => OnEliminar(context.Id)">
                    <i class="bi bi-trash-fill"></i>
                </button>
            </td>
        }
    </Detalles>
</ListaGenerica>
<div class="row justify-content-end">
    <div class="col-auto">
        <button class="btn btn-outline-danger" @onclick="OnExportarPdf"><i
                class="bi bi-filetype-pdf me-1"></i>Exportar</button>
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-success" @onclick="OnExportarExcel"><i class="bi bi-file-excel me-1"></i>Exportar</button>
    </div>
</div>

<DataPager Result="PagedResult" OnPageChanged="PaginaCambiada" OnPageSizeChanged="FilasPorPagina" />

<LoadingComponent IsLoading="IsLoading" />

@code {

    public BusquedaTallerRequest BusquedaRequest { get; set; } = new()
        {
            Nombre = string.Empty,
            Pagina = 1,
            Filas = 5
        };
    public ICollection<TallerDtoResponse>? Talleres { get; set; }

    public bool IsLoading { get; set; }
    private bool ExportarPdf { get; set; }
    public DataPager Paginador { get; set; } = default!;

    public PagedResult<TallerDtoResponse> PagedResult { get; set; } = default!;

    public ICollection<CategoriaDtoResponse> Categorias { get; set; } = new List<CategoriaDtoResponse>();
    public ICollection<SituacionModel> Situaciones { get; set; } = new List<SituacionModel>();

    protected override async Task OnInitializedAsync()
    {
        Categorias = await CategoriaProxy.ListAsync();
        Situaciones = await JsonProxy.ListSituaciones();

        PagedResult = new PagedResult<TallerDtoResponse>()
            {
                CurrentPage = BusquedaRequest.Pagina,
                RowPerPage = BusquedaRequest.Filas
            };
    }

    private async Task OnSearch()
    {
        try

        {
            IsLoading = true;

            var response = await Proxy.ListAsync(BusquedaRequest);

            Talleres = response.Data;
            if (Talleres is not null)
            {
                PagedResult.Results = Talleres;
                PagedResult.RowCount = Talleres.Count;
                PagedResult.TotalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OnLimpiar()
    {
        BusquedaRequest = new() { Pagina = 1, Filas = 5 };
    }

    private void OnNuevo()
    {
        Nav.NavigateTo("/taller/nuevo");
    }

    private void OnEditar(int id)
    {
        Nav.NavigateTo($"/taller/editar/{id}");
    }

    private async Task OnEliminar(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = "Desea eliminar el registro?",
                    Title = "Eliminar",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true
                });

            if (result.IsConfirmed)
            {
                await Proxy.DeleteAsync(id);

                await OnSearch();
            }
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }
    }

    private async Task PaginaCambiada()
    {
        IsLoading = true;
        BusquedaRequest.Pagina = PagedResult.CurrentPage;
        BusquedaRequest.Filas = PagedResult.RowPerPage;
        await OnSearch();
    }

    private async Task FilasPorPagina()
    {
        BusquedaRequest.Pagina = PagedResult.CurrentPage;
        BusquedaRequest.Filas = PagedResult.RowPerPage;
        await OnSearch();
    }

    private async Task OnExportarPdf()
    {
        if (Talleres is null) return;

        try
        {
            ExportarPdf = true;

            // Aca cargaremos el archivo JS en tiempo de ejecucion

            await using var module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/HtmlToPdf.js");

            var contenidoTabla = await JsRuntime.InvokeAsync<string>("getTableHtml");
            // Generamos y descargamos el PDF
            await module.InvokeVoidAsync("generateAndDownloadPdf", $"{contenidoTabla}", "Talleres.pdf");

            ExportarPdf = false;
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }

    }

    private async Task OnExportarExcel()
    {
        if (Talleres is null) return;
        try
        {
            IsLoading = true;

            HttpClient = new HttpClient();
            HttpClient.BaseAddress = new Uri(WebAssemblyHost.BaseAddress);

            var plantilla = await HttpClient.GetStreamAsync("assets/xls/TallerTemplate.xlsx");

            var excel = new PlantillaXls();
            var xlsStream = excel.GenerarPlantilla(plantilla, Talleres);
            await JsRuntime.InvokeVoidAsync("BlazorDownloadFile", "Talleres.xlsx", xlsStream);
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
